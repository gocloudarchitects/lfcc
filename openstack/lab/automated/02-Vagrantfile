# -*- mode: ruby -*-
# vi: set ft=ruby :

# MINIMUM REQUIREMENTS
# CPU: non listed
# RAM: 8GB
# HDD: 40GB
# Network: 2 NICs
# (optional): additional HDD for Cinder volumes

$createnic = <<-SCRIPT
cat << EOF >  /etc/systemd/network/10-dummy-provider.netdev
[NetDev]
Name=dummy-provider
Kind=dummy
EOF
systemctl restart systemd-networkd
ip link set up dummy-provider
SCRIPT


Vagrant.configure("2") do |config|
  # main VM definition
  config.vm.box = "ubuntu/focal64"
  config.vm.provision "shell", inline: "hostnamectl set-hostname stack-lab"
  config.vm.network "public_network", ip: "192.168.5.2", bridge: "br-api"

  # Creating a dummy interface instead of bridging the network to the outside
  config.vm.provision "shell", inline: $createnic
  # config.vm.network "public_network", auto_config: false, bridge: "br-provider"
  
  # additional disk for Cinder volumes
  config.vm.disk :disk, name: "cinder", size: "20GB"
  
  # Virtualbox-specific parameters
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "8192"
    vb.cpus    = "4"
    vb.customize ["modifyvm", :id, "--nested-hw-virt", "on"]
  end

  config.vm.provision "shell", inline: $script
end

$script=<<-SCRIPT
sudo apt-get update
sudo apt-get upgrade -y
sudo apt-get install -y python3-dev libffi-dev gcc libssl-dev python3-venv net-tools bridge-utils

# set up ansible config
mkdir /etc/ansible -p
cat << EOF > /etc/ansible/ansible.cfg
[defaults]
host_key_checking=False
pipelining=True
forks=100
EOF

# create kolla config dir
mkdir -p /etc/kolla
chown vagrant:vagrant /etc/kolla

# prepare driver for cinder lvm pool
pvcreate /dev/sdc
vgcreate cinder-volumes /dev/sdc

# create setup script
cat << EOF > ~vagrant/setup.sh
#!/bin/bash
mkdir ~/venv
python3 -m venv ~/venv/kolla
source ~/venv/kolla/bin/activate
pip install -U pip
pip install 'ansible<5.0'

# Install the 'Xena' release
pip install git+https://opendev.org/openstack/kolla-ansible@stable/xena || pip install git+https://github.com/openstack/kolla-ansible@stable/xena

pip install python-openstackclient -c https://releases.openstack.org/constraints/upper/xena || pip install git+https://github.com/openstack/python-openstackclient@stable/xena



cp ~/venv/kolla/share/kolla-ansible/ansible/inventory/* .


cp ~/venv/kolla/share/kolla-ansible/etc_examples/kolla/* /etc/kolla/
cat << DONE > /etc/kolla/globals.yml
---
kolla_base_distro: "ubuntu"
kolla_internal_vip_address: "192.168.5.254"
kolla_sysctl_conf_path: /etc/sysctl.d/50-kolla-ansible.conf
network_interface: "enp0s8"
neutron_external_interface: "dummy-provider"
enable_cinder: "yes"
enable_cinder_backend_lvm: "yes"
enable_neutron_provider_networks: "yes"
DONE

kolla-genpwd
sed -i 's/^keystone_admin_password:.*$/keystone_admin_password: kolla/g' /etc/kolla/passwords.yml

kolla-ansible -i all-in-one bootstrap-servers
kolla-ansible -i all-in-one prechecks && kolla-ansible -i all-in-one deploy && kolla-ansible -i all-in-one post-deploy

# OPTIONAL SETUP
#source /etc/kolla/admin-openrc.sh
#sed 's/10.0.2/192.168.6/g' ~/venv/kolla/share/kolla-ansible/init-runonce -i
#~/venv/kolla/share/kolla-ansible/init-runonce
#bash -c 'sudo cat << NESTEDEOF > /etc/netplan/60-provider.yaml
#network:
#  version: 2
#  renderer: networkd
#  bridges:
#    br-ex:
#      addresses:
#      - 192.168.6.1/24
#NESTEDEOF'
#sudo netplan apply
#openstack server create --image cirros --flavor m1.tiny --key-name mykey --network demo-net demo1
EOF

chmod +x ~vagrant/setup.sh
chown vagrant.vagrant ~vagrant/setup.sh
sudo bash -c 'sleep 15; reboot' &
SCRIPT

